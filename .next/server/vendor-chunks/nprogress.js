"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nprogress";
exports.ids = ["vendor-chunks/nprogress"];
exports.modules = {

/***/ "(ssr)/./node_modules/nprogress/nprogress.js":
/*!*********************************************!*\
  !*** ./node_modules/nprogress/nprogress.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\n(function(root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(void 0, function() {\n    var NProgress = {};\n    NProgress.version = \"0.2.0\";\n    var Settings = NProgress.settings = {\n        minimum: 0.08,\n        easing: \"ease\",\n        positionUsing: \"\",\n        speed: 200,\n        trickle: true,\n        trickleRate: 0.02,\n        trickleSpeed: 800,\n        showSpinner: true,\n        barSelector: '[role=\"bar\"]',\n        spinnerSelector: '[role=\"spinner\"]',\n        parent: \"body\",\n        template: '<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>'\n    };\n    /**\n   * Updates configuration.\n   *\n   *     NProgress.configure({\n   *       minimum: 0.1\n   *     });\n   */ NProgress.configure = function(options) {\n        var key, value;\n        for(key in options){\n            value = options[key];\n            if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;\n        }\n        return this;\n    };\n    /**\n   * Last number.\n   */ NProgress.status = null;\n    /**\n   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.\n   *\n   *     NProgress.set(0.4);\n   *     NProgress.set(1.0);\n   */ NProgress.set = function(n) {\n        var started = NProgress.isStarted();\n        n = clamp(n, Settings.minimum, 1);\n        NProgress.status = n === 1 ? null : n;\n        var progress = NProgress.render(!started), bar = progress.querySelector(Settings.barSelector), speed = Settings.speed, ease = Settings.easing;\n        progress.offsetWidth; /* Repaint */ \n        queue(function(next) {\n            // Set positionUsing if it hasn't already been set\n            if (Settings.positionUsing === \"\") Settings.positionUsing = NProgress.getPositioningCSS();\n            // Add transition\n            css(bar, barPositionCSS(n, speed, ease));\n            if (n === 1) {\n                // Fade out\n                css(progress, {\n                    transition: \"none\",\n                    opacity: 1\n                });\n                progress.offsetWidth; /* Repaint */ \n                setTimeout(function() {\n                    css(progress, {\n                        transition: \"all \" + speed + \"ms linear\",\n                        opacity: 0\n                    });\n                    setTimeout(function() {\n                        NProgress.remove();\n                        next();\n                    }, speed);\n                }, speed);\n            } else {\n                setTimeout(next, speed);\n            }\n        });\n        return this;\n    };\n    NProgress.isStarted = function() {\n        return typeof NProgress.status === \"number\";\n    };\n    /**\n   * Shows the progress bar.\n   * This is the same as setting the status to 0%, except that it doesn't go backwards.\n   *\n   *     NProgress.start();\n   *\n   */ NProgress.start = function() {\n        if (!NProgress.status) NProgress.set(0);\n        var work = function() {\n            setTimeout(function() {\n                if (!NProgress.status) return;\n                NProgress.trickle();\n                work();\n            }, Settings.trickleSpeed);\n        };\n        if (Settings.trickle) work();\n        return this;\n    };\n    /**\n   * Hides the progress bar.\n   * This is the *sort of* the same as setting the status to 100%, with the\n   * difference being `done()` makes some placebo effect of some realistic motion.\n   *\n   *     NProgress.done();\n   *\n   * If `true` is passed, it will show the progress bar even if its hidden.\n   *\n   *     NProgress.done(true);\n   */ NProgress.done = function(force) {\n        if (!force && !NProgress.status) return this;\n        return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);\n    };\n    /**\n   * Increments by a random amount.\n   */ NProgress.inc = function(amount) {\n        var n = NProgress.status;\n        if (!n) {\n            return NProgress.start();\n        } else {\n            if (typeof amount !== \"number\") {\n                amount = (1 - n) * clamp(Math.random() * n, 0.1, 0.95);\n            }\n            n = clamp(n + amount, 0, 0.994);\n            return NProgress.set(n);\n        }\n    };\n    NProgress.trickle = function() {\n        return NProgress.inc(Math.random() * Settings.trickleRate);\n    };\n    /**\n   * Waits for all supplied jQuery promises and\n   * increases the progress as the promises resolve.\n   *\n   * @param $promise jQUery Promise\n   */ (function() {\n        var initial = 0, current = 0;\n        NProgress.promise = function($promise) {\n            if (!$promise || $promise.state() === \"resolved\") {\n                return this;\n            }\n            if (current === 0) {\n                NProgress.start();\n            }\n            initial++;\n            current++;\n            $promise.always(function() {\n                current--;\n                if (current === 0) {\n                    initial = 0;\n                    NProgress.done();\n                } else {\n                    NProgress.set((initial - current) / initial);\n                }\n            });\n            return this;\n        };\n    })();\n    /**\n   * (Internal) renders the progress bar markup based on the `template`\n   * setting.\n   */ NProgress.render = function(fromStart) {\n        if (NProgress.isRendered()) return document.getElementById(\"nprogress\");\n        addClass(document.documentElement, \"nprogress-busy\");\n        var progress = document.createElement(\"div\");\n        progress.id = \"nprogress\";\n        progress.innerHTML = Settings.template;\n        var bar = progress.querySelector(Settings.barSelector), perc = fromStart ? \"-100\" : toBarPerc(NProgress.status || 0), parent = document.querySelector(Settings.parent), spinner;\n        css(bar, {\n            transition: \"all 0 linear\",\n            transform: \"translate3d(\" + perc + \"%,0,0)\"\n        });\n        if (!Settings.showSpinner) {\n            spinner = progress.querySelector(Settings.spinnerSelector);\n            spinner && removeElement(spinner);\n        }\n        if (parent != document.body) {\n            addClass(parent, \"nprogress-custom-parent\");\n        }\n        parent.appendChild(progress);\n        return progress;\n    };\n    /**\n   * Removes the element. Opposite of render().\n   */ NProgress.remove = function() {\n        removeClass(document.documentElement, \"nprogress-busy\");\n        removeClass(document.querySelector(Settings.parent), \"nprogress-custom-parent\");\n        var progress = document.getElementById(\"nprogress\");\n        progress && removeElement(progress);\n    };\n    /**\n   * Checks if the progress bar is rendered.\n   */ NProgress.isRendered = function() {\n        return !!document.getElementById(\"nprogress\");\n    };\n    /**\n   * Determine which positioning CSS rule to use.\n   */ NProgress.getPositioningCSS = function() {\n        // Sniff on document.body.style\n        var bodyStyle = document.body.style;\n        // Sniff prefixes\n        var vendorPrefix = \"WebkitTransform\" in bodyStyle ? \"Webkit\" : \"MozTransform\" in bodyStyle ? \"Moz\" : \"msTransform\" in bodyStyle ? \"ms\" : \"OTransform\" in bodyStyle ? \"O\" : \"\";\n        if (vendorPrefix + \"Perspective\" in bodyStyle) {\n            // Modern browsers with 3D support, e.g. Webkit, IE10\n            return \"translate3d\";\n        } else if (vendorPrefix + \"Transform\" in bodyStyle) {\n            // Browsers without 3D support, e.g. IE9\n            return \"translate\";\n        } else {\n            // Browsers without translate() support, e.g. IE7-8\n            return \"margin\";\n        }\n    };\n    /**\n   * Helpers\n   */ function clamp(n, min, max) {\n        if (n < min) return min;\n        if (n > max) return max;\n        return n;\n    }\n    /**\n   * (Internal) converts a percentage (`0..1`) to a bar translateX\n   * percentage (`-100%..0%`).\n   */ function toBarPerc(n) {\n        return (-1 + n) * 100;\n    }\n    /**\n   * (Internal) returns the correct CSS for changing the bar's\n   * position given an n percentage, and speed and ease from Settings\n   */ function barPositionCSS(n, speed, ease) {\n        var barCSS;\n        if (Settings.positionUsing === \"translate3d\") {\n            barCSS = {\n                transform: \"translate3d(\" + toBarPerc(n) + \"%,0,0)\"\n            };\n        } else if (Settings.positionUsing === \"translate\") {\n            barCSS = {\n                transform: \"translate(\" + toBarPerc(n) + \"%,0)\"\n            };\n        } else {\n            barCSS = {\n                \"margin-left\": toBarPerc(n) + \"%\"\n            };\n        }\n        barCSS.transition = \"all \" + speed + \"ms \" + ease;\n        return barCSS;\n    }\n    /**\n   * (Internal) Queues a function to be executed.\n   */ var queue = function() {\n        var pending = [];\n        function next() {\n            var fn = pending.shift();\n            if (fn) {\n                fn(next);\n            }\n        }\n        return function(fn) {\n            pending.push(fn);\n            if (pending.length == 1) next();\n        };\n    }();\n    /**\n   * (Internal) Applies css properties to an element, similar to the jQuery \n   * css method.\n   *\n   * While this helper does assist with vendor prefixed property names, it \n   * does not perform any manipulation of values prior to setting styles.\n   */ var css = function() {\n        var cssPrefixes = [\n            \"Webkit\",\n            \"O\",\n            \"Moz\",\n            \"ms\"\n        ], cssProps = {};\n        function camelCase(string) {\n            return string.replace(/^-ms-/, \"ms-\").replace(/-([\\da-z])/gi, function(match, letter) {\n                return letter.toUpperCase();\n            });\n        }\n        function getVendorProp(name) {\n            var style = document.body.style;\n            if (name in style) return name;\n            var i = cssPrefixes.length, capName = name.charAt(0).toUpperCase() + name.slice(1), vendorName;\n            while(i--){\n                vendorName = cssPrefixes[i] + capName;\n                if (vendorName in style) return vendorName;\n            }\n            return name;\n        }\n        function getStyleProp(name) {\n            name = camelCase(name);\n            return cssProps[name] || (cssProps[name] = getVendorProp(name));\n        }\n        function applyCss(element, prop, value) {\n            prop = getStyleProp(prop);\n            element.style[prop] = value;\n        }\n        return function(element, properties) {\n            var args = arguments, prop, value;\n            if (args.length == 2) {\n                for(prop in properties){\n                    value = properties[prop];\n                    if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);\n                }\n            } else {\n                applyCss(element, args[1], args[2]);\n            }\n        };\n    }();\n    /**\n   * (Internal) Determines if an element or space separated list of class names contains a class name.\n   */ function hasClass(element, name) {\n        var list = typeof element == \"string\" ? element : classList(element);\n        return list.indexOf(\" \" + name + \" \") >= 0;\n    }\n    /**\n   * (Internal) Adds a class to an element.\n   */ function addClass(element, name) {\n        var oldList = classList(element), newList = oldList + name;\n        if (hasClass(oldList, name)) return;\n        // Trim the opening space.\n        element.className = newList.substring(1);\n    }\n    /**\n   * (Internal) Removes a class from an element.\n   */ function removeClass(element, name) {\n        var oldList = classList(element), newList;\n        if (!hasClass(element, name)) return;\n        // Replace the class name.\n        newList = oldList.replace(\" \" + name + \" \", \" \");\n        // Trim the opening and closing spaces.\n        element.className = newList.substring(1, newList.length - 1);\n    }\n    /**\n   * (Internal) Gets a space separated list of the class names on the element. \n   * The list is wrapped with a single space on each end to facilitate finding \n   * matches within the list.\n   */ function classList(element) {\n        return (\" \" + (element.className || \"\") + \" \").replace(/\\s+/gi, \" \");\n    }\n    /**\n   * (Internal) Removes an element from the DOM.\n   */ function removeElement(element) {\n        element && element.parentNode && element.parentNode.removeChild(element);\n    }\n    return NProgress;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nprogress/nprogress.js\n");

/***/ })

};
;